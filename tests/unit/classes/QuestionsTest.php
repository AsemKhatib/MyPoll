<?php

namespace MyPoll\Tests\Unit\Classes;

use DI\Container;
use Mockery as m;
use MyPoll\Classes\Database\RedBeanDB;
use MyPoll\Classes\Pagination;
use MyPoll\Classes\Questions;
use MyPoll\Classes\Settings;
use Twig_Environment;
use PHPUnit_Framework_TestCase;

class QuestionsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    private $container;

    public function setUp()
    {
        parent::setUp();
        global  $container;
        $this->container = $container;
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $extraArray array
     * @param mixed $return
     *
     * @return RedBeanDB
     */
    private function getMockObject($return, $extraArray = null)
    {
        $database = m::mock('MyPoll\Classes\Database\RedBeanDB');
        $database->shouldReceive('getRow')->once()->withAnyArgs()->andReturn($return);
        if ($extraArray) {
            foreach ($extraArray as $item) {
                $database->shouldReceive($item['method'])->once()->withAnyArgs()->andReturn($item['return']);
            }
        }
        return $database;
    }

    private function getMockData()
    {
        return array(
            'id' => 1,
            'email' => 'email@d.com',
            'user_name' => 'user',
            'user_pass' => password_hash('password', PASSWORD_DEFAULT)
        );
    }

    /**
     * @param $extraArray array
     *
     * @return Questions
     */
    private function getQuestion($extraArray = null)
    {
        $questions =  new Questions(
            $this->getMockObject($this->getMockData(), $extraArray),
            $this->container->get(Twig_Environment::class),
            $this->container->get(Pagination::class),
            $this->container->get(Settings::class)
        );

        return $questions;
    }

    public function testAddSuccess()
    {

    }
}
