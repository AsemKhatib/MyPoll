<?php

namespace MyPoll\Tests\Unit\Classes;

use DI\Container;
use Mockery as m;
use MyPoll\Classes\Database\RedBeanDB;
use MyPoll\Classes\Pagination;
use MyPoll\Classes\Questions;
use MyPoll\Classes\Settings;
use Twig_Environment;
use Twig_Loader_Filesystem;
use PHPUnit_Framework_TestCase;
use Exception;

class QuestionsTest extends PHPUnit_Framework_TestCase
{

    protected $extraArrayFull = array(
        array('method' => 'getById', 'return' => array('id' => 1, 'question' => 'test Question')),
        array('method' => 'getAll', 'return' => array(
            array('id' => 1, 'qid' => 1, 'answer' => 'answer1', 'votes' => 10),
            array('id' => 2, 'qid' => 1, 'answer' => 'answer2', 'votes' => 5),
            array('id' => 3, 'qid' => 1, 'answer' => 'answer3', 'votes' => 20)
        )),
    );

    protected $dataArray = array(
        'question' => 'question',
        'answers' => array('answer1', 'answer2', 'answer3')
    );

    protected $dataArrayEdit = array(
        'qid' => 1,
        'question' => 'question',
        'answers_old' => array('answer1', 'answer2', 'answer3')
    );


    /**
     * @var Container
     */
    private $container;

    /**
     * @var Twig_Loader_Filesystem
     */
    private $twigLoader;

    public function setUp()
    {
        parent::setUp();
        global  $container;
        $this->container = $container;
        $this->twigLoader = $this->container->get(Twig_Loader_Filesystem::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $extraArray array
     *
     * @return RedBeanDB
     */
    private function getMockObject($extraArray = null)
    {
        $database = m::mock('MyPoll\Classes\Database\RedBeanDB');
        if ($extraArray) {
            foreach ($extraArray as $item) {
                $database->shouldReceive($item['method'])->once()->withAnyArgs()->andReturn($item['return']);
            }
        }
        return $database;
    }

    /**
     * @return Pagination
     */
    private function getMockPagination()
    {
        $pagination = m::mock('MyPoll\Classes\Pagination');
        $pagination->shouldReceive('setParams')->once()->withAnyArgs()->andReturn(true);
        $pagination->shouldReceive('getResults')->once()->withAnyArgs()->andReturn(true);
        $pagination->shouldReceive('getPagesNumber')->once()->withAnyArgs()->andReturn(true);
        return $pagination;
    }

    /**
     * @param array $extraArrayDB
     *
     * @return Questions
     */
    private function getQuestion($extraArrayDB = null)
    {
        $questions =  new Questions(
            $this->getMockObject($extraArrayDB),
            $this->container->get(Twig_Environment::class),
            $this->getMockPagination(),
            $this->container->get(Settings::class)
        );

        return $questions;
    }

    public function testAddSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="callBack" value="addExecute">',
            $this->getQuestion()->add()
        );
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testAddFail()
    {
        $this->getQuestion()->add();
    }

    public function testGetPostParamsForAddMethodSuccess()
    {
        $_POST['question'] = 'question1111';
        $_POST['answer'] = array('answer1', 'answer2', 'answer3');
        $this->assertEquals(
            array('question' => $_POST['question'], 'answers' => $_POST['answer']),
            $this->getQuestion()->getPostParamsForAddMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Notice
     */
    public function testGetPostParamsForAddMethodFailWithNoPostParams()
    {
        $this->getQuestion()->getPostParamsForAddMethod();
    }

    public function testGetPostParamsForAddMethodFailWithEmptyPostParams()
    {
        $_POST['question'] = '';
        $_POST['answer'] = array();
        $this->assertArrayHasKey('question', $this->getQuestion()->getPostParamsForAddMethod());
        $this->assertArrayHasKey('answers', $this->getQuestion()->getPostParamsForAddMethod());
    }

    public function testAddExecuteSuccess()
    {
        $extraArray = array(
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => true),
            array('method' => 'getID', 'return' => 1)
        );

        $question = $this->getQuestion($extraArray);
        $this->assertEquals('Question Added successfully', $question->addExecute($this->dataArray));
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Something went wrong while trying to add the question
     */
    public function testAddExecuteFailWithAddQuestion()
    {
        $extraArray = array(
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => array()),
            array('method' => 'getID', 'return' => false)
        );

        $this->getQuestion($extraArray)->addExecute($this->dataArray);
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Something went wrong while trying to add the answers of the new question
     */
    public function testAddExecuteFailWithAddAnswers()
    {
        $extraArray = array(
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => true),
            array('method' => 'getID', 'return' => true),
            array('method' => 'addRows', 'return' => array()),
            array('method' => 'store', 'return' => array()),
        );

        $this->getQuestion($extraArray)->addExecute($this->dataArray);
    }


    public function testShowSuccess()
    {
        $extraArray = array(array('method' => 'count', 'return' => 10), array('method' => 'find', 'return' => true));
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains('<div class="show_poll">', $this->getQuestion($extraArray)->show());
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testShowFailWithTwig()
    {
        $extraArray = array(array('method' => 'count', 'return' => false));
        $this->getQuestion($extraArray)->show();
    }

    public function testShowFailWithEmptyFindResult()
    {
        $extraArray = array(
            array('method' => 'count', 'return' => 10),
            array('method' => 'find', 'return' => array())
        );

        $this->twigLoader->addPath('admin/template/');

        try {
            $this->getQuestion($extraArray)->show();
        } catch (\Exception $e) {
            $this->assertEquals(
                'An error occurred while trying to fetch rows for Pagination',
                $e->getMessage()
            );
        }
    }

    public function testShowAnswersSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            'function drawChart()',
            $this->getQuestion(array($this->extraArrayFull[1]))->showAnswers(1, true)
        );
    }

    public function testShowAnswersFailEmptyArray()
    {
        $extraArray = array(
            array('method' => 'getAll', 'return' => array()));

        $this->assertFalse($this->getQuestion($extraArray)->showAnswers(1, 'true'));
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testShowAnswersFailWithTwig()
    {
        $extraArray = array(array('method' => 'getAll', 'return' => array(1, 2, 3)));
        $this->getQuestion($extraArray)->showAnswers(1, 'true');
    }

    public function testEditSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="callBack" value="editExecute">',
            $this->getQuestion($this->extraArrayFull)->edit(1)
        );
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testEditFail()
    {
        $this->getQuestion($this->extraArrayFull)->edit(1);
    }

    public function testGetPostParamsForEditMethodSuccess()
    {
        $_POST['qid'] = '1';
        $_POST['question'] = 'question1111';
        $_POST['answer'] = array('answer1', 'answer2', 'answer3');
        $this->assertEquals(
            array('qid' => $_POST['qid'], 'question' => $_POST['question'], 'answers_old' => $_POST['answer']),
            $this->getQuestion()->getPostParamsForEditMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Notice
     */
    public function testGetPostParamsForEditMethodFailWithNoPostParams()
    {
        $this->getQuestion()->getPostParamsForEditMethod();
    }

    public function testGetPostParamsForEditMethodFailWithEmptyPostParams()
    {
        $_POST['qid'] = '';
        $_POST['question'] = '';
        $_POST['answer'] = array();

        $this->assertEquals(
            array(
                'qid' => '',
                'question' => '',
                'answers_old' => array()
            ),
            $this->getQuestion()->getPostParamsForEditMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error
     */
    public function testGetPostParamsForEditMethodFailWithEmptyPostParamsWithUndefinedArray()
    {
        $_POST['qid'] = '';
        $_POST['question'] = '';
        $_POST['answer'] = '';

        $this->getQuestion()->getPostParamsForEditMethod();
    }

    public function testEditExecuteSuccess()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => true),
            array('method' => 'editRow', 'return' => true),
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => true),
            array('method' => 'getID', 'return' => 1)
        );

        $question = $this->getQuestion($extraArray);
        $this->assertEquals('Question edited successfully', $question->editExecute($this->dataArrayEdit));
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Something went wrong while trying to edit the question
     */
    public function testEditExecuteFailWithQuestionEdit()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => true),
            array('method' => 'editRow', 'return' => array()),
            array('method' => 'store', 'return' => array())
        );

        $this->getQuestion($extraArray)->editExecute($this->dataArrayEdit);
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Something went wrong while trying to add new answers to this question
     */
    public function testEditExecuteFailWithAnswersAdd()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => true),
            array('method' => 'editRow', 'return' => true),
            array('method' => 'store', 'return' => true),
            array('method' => 'getById', 'return' => array(0 => [])),
            array('method' => 'addRows', 'return' => array()),
            array('method' => 'store', 'return' => array())
        );

        $this->getQuestion($extraArray)->editExecute($this->dataArrayEdit);
    }

    /**
     * @expectedException \Exception
     * @expectedExceptionMessage Something went wrong while trying to edit the answers of this question
     */
    public function testEditExecuteFailWithAnswersEdit()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => true),
            array('method' => 'editRow', 'return' => true),
            array('method' => 'store', 'return' => true),
            array('method' => 'getById', 'return' => array(0 => array('answer' => 'b'))),
            array('method' => 'editRow', 'return' => array()),
            array('method' => 'store', 'return' => array())
        );

        $this->getQuestion($extraArray)->editExecute($this->dataArrayEdit);
    }

    public function testDeleteSuccess()
    {
        $extraArray = array(
            array('method' => 'deleteById', 'return' => true),
            array('method' => 'find', 'return' => true),
            array('method' => 'deleteAll', 'return' => true)
        );

        $this->assertEquals(
            'The question and all its answers were successfully deleted',
            $this->getQuestion($extraArray)->delete(1)
        );
    }

}
