<?php

namespace MyPoll\Tests\Unit\Classes;

use DI\Container;
use Mockery as m;
use MyPoll\Classes\Database\RedBeanDB;
use MyPoll\Classes\Settings;
use Twig_Environment;
use Twig_Loader_Filesystem;
use PHPUnit_Framework_TestCase;

class SettingsTest extends \PHPUnit_Framework_TestCase
{
    protected $dataArray = array(
        'id' => 1,
        'site_name' => 'System V 1.0',
        'site_resultsnumber' => 10,
        'site_cookies' => 0,
        'site_cache' => 0,
        'site_maxanswers' => 4
    );

    /**
     * @var Container
     */
    private $container;

    /**
     * @var Twig_Loader_Filesystem
     */
    private $twigLoader;

    public function setUp()
    {
        parent::setUp();
        global  $container;
        $this->container = $container;
        $this->twigLoader = $this->container->get(Twig_Loader_Filesystem::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $extraArray array
     *
     * @return RedBeanDB
     */
    private function getMockObject($extraArray = null)
    {
        $database = m::mock('MyPoll\Classes\Database\RedBeanDB');
        if ($extraArray) {
            foreach ($extraArray as $item) {
                $database->shouldReceive($item['method'])->once()->withAnyArgs()->andReturn($item['return']);
            }
        }
        return $database;
    }

    /**
     * @param array $extraArrayDB
     * @param int $id
     *
     * @return Settings
     */
    private function getSettings($id, $extraArrayDB = null)
    {
        $settings =  new Settings(
            $this->container->get(Twig_Environment::class),
            $this->getMockObject($extraArrayDB),
            $id
        );
        return $settings;
    }

    public function testEditSuccess()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => $this->dataArray)
        );
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="callBack" value="editExecuteSettings">',
            $this->getSettings(1, $extraArray)->edit()
        );
    }

    public function testEditSuccessCheckGetters()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => $this->dataArray)
        );
        $this->twigLoader->addPath('admin/template/');
        $settings = $this->getSettings(20, $extraArray);
        $settings->edit();
        $this->assertEquals($this->dataArray['site_name'], $settings->getSiteName());
        $this->assertEquals($this->dataArray['site_resultsnumber'], $settings->getResultNumber());
        $this->assertEquals($this->dataArray['site_maxanswers'], $settings->getSiteMaxAnswers());
    }

    public function testEditFailNoSettingsFound()
    {
        $extraArray = array(
            array('method' => 'getById', 'return' => false)
        );
        $this->twigLoader->addPath('admin/template/');
        $settings = $this->getSettings(20, $extraArray);
        $this->assertEquals(
            '<meta http-equiv="refresh" content="2; url=' . $settings->getIndexPage() . '">' . 'The Setting with this ID could not be found in the system',
            $settings->edit()
        );
    }

    public function testEditExecuteSuccess()
    {
        $extraArray = array(
            array('method' => 'editRow', 'return' => true),
            array('method' => 'store', 'return' => array(1, 2, 3)),
            array('method' => 'getById', 'return' => true)
        );
        $settings = $this->getSettings(1, $extraArray);
        $_POST['settings'] = $this->dataArray;
        $this->assertEquals('Settings edited successfully', $settings->editExecute($_POST['settings']));
    }

    public function testEditExecuteFail()
    {
        $extraArray = array(
            array('method' => 'editRow', 'return' => true),
            array('method' => 'store', 'return' => array()),
            array('method' => 'getById', 'return' => true)
        );
        $settings = $this->getSettings(1, $extraArray);
        $_POST['settings'] = $this->dataArray;
        $this->assertEquals('Something went wrong while trying to edit the settings', $settings->editExecute($_POST['settings']));
    }

}

