<?php

namespace MyPoll\Classes;

use DI\Container;
use Mockery as m;
use MyPoll\Classes\Database\RedBeanDB;
use MyPoll\Classes\Pagination;
use MyPoll\Classes\Users;
use MyPoll\Classes\Settings;
use Twig_Environment;
use Twig_Loader_Filesystem;
use PHPUnit_Framework_TestCase;

class UsersTest extends \PHPUnit_Framework_TestCase
{
    protected $extraArrayFull = array(
        array('method' => 'getById', 'return' => array(
            'id' => 2,
            'user_name' => 'testUser',
            'user_pass' => 'testPass',
            'email' => 'test@email.com',
        )),
    );

    protected $dataArray = array('user' => 'user', 'password' => 'password', 'email' => 'ebaa@eee.com');

    protected $dataArrayEdit = array(
        'qid' => 1,
        'question' => 'question',
        'answers_old' => array('answer1', 'answer2', 'answer3')
    );

    /**
     * @var Container
     */
    private $container;

    /**
     * @var Twig_Loader_Filesystem
     */
    private $twigLoader;

    public function setUp()
    {
        parent::setUp();
        global  $container;
        $this->container = $container;
        $this->twigLoader = $this->container->get(Twig_Loader_Filesystem::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $extraArray array
     *
     * @return RedBeanDB
     */
    private function getMockObject($extraArray = null)
    {
        $database = m::mock('MyPoll\Classes\Database\RedBeanDB');
        if ($extraArray) {
            foreach ($extraArray as $item) {
                $database->shouldReceive($item['method'])->once()->withAnyArgs()->andReturn($item['return']);
            }
        }
        return $database;
    }

    /**
     * @return Pagination
     */
    private function getMockPagination()
    {
        $pagination = m::mock('MyPoll\Classes\Pagination');
        $pagination->shouldReceive('setParams')->once()->withAnyArgs()->andReturn(true);
        $pagination->shouldReceive('getResults')->once()->withAnyArgs()->andReturn(true);
        $pagination->shouldReceive('getPagesNumber')->once()->withAnyArgs()->andReturn(true);
        return $pagination;
    }

    /**
     * @param array $extraArrayDB
     *
     * @return Users
     */
    private function getUsers($extraArrayDB = null)
    {
        $users =  new Users(
            $this->getMockObject($extraArrayDB),
            $this->container->get(Twig_Environment::class),
            $this->getMockPagination(),
            $this->container->get(Settings::class)
        );

        return $users;
    }

    public function testAddSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains('<input type="hidden" id="callBack" value="addExecute">', $this->getUsers()->add());
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testAddFail()
    {
        $this->getUsers()->add();
    }

    public function testGetPostParamsForAddMethodSuccess()
    {
        $_POST['user_name'] = 'username';
        $_POST['user_password'] = 'password';
        $_POST['user_email'] = 'aaaa@aaa.com';
        $this->assertEquals(
            array('user' => $_POST['user_name'], 'password' => $_POST['user_password'], 'email' => $_POST['user_email']),
            $this->getUsers()->getPostParamsForAddMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Notice
     */
    public function testGetPostParamsForAddMethodFailWithNoPostParams()
    {
        $this->getUsers()->getPostParamsForAddMethod();
    }

    public function testGetPostParamsForAddMethodFailWithEmptyPostParams()
    {
        $_POST['user_name'] = '';
        $_POST['user_password'] = '';
        $_POST['user_email'] = '';
        $this->assertArrayHasKey('user', $this->getUsers()->getPostParamsForAddMethod());
    }

    public function testAddExecuteSuccess()
    {
        $extraArray = array(
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => true),
            // false here means that the data are not existed already in the database
            array('method' => 'find', 'return' => false)
        );

        $user = $this->getUsers($extraArray);
        $this->assertEquals('User Added successfully', $user->addExecute($this->dataArray));
    }

    public function testAddExecuteFailWithException()
    {
        $extraArray = array(
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => array()),
            // false here means that the data are not existed already in the database
            array('method' => 'find', 'return' => false)
        );

        try {
            $this->getUsers($extraArray)->addExecute($this->dataArray);
        } catch (\Exception $e) {
            $this->assertEquals(
                'Something went wrong while trying to add the user',
                $e->getMessage()
            );
        }
    }

    public function testAddExecuteFailWithExistedEmailOrUser()
    {
        $extraArray = array(
            array('method' => 'addRows', 'return' => true),
            array('method' => 'store', 'return' => array()),
            // true here means that the data are existed already in the database
            array('method' => 'find', 'return' => true)
        );

        $user = $this->getUsers($extraArray);

        $this->assertEquals(
            $user::USER_OR_EMAIL_EXIST,
            $user->addExecute($this->dataArray)
        );
    }

    public function testAddExecuteFailWithInvalidEmail()
    {
        $dataArray = array('user' => 'user', 'password' => 'password', 'email' => General::cleanInput('email', 'ebaa'));
        $user = $this->getUsers();

        $this->assertEquals(
            $user::INVALID_EMAIL,
            $user->addExecute($dataArray)
        );
    }

    public function testShowSuccess()
    {
        $extraArray = array(array('method' => 'count', 'return' => 10), array('method' => 'find', 'return' => true));
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains('<div class="inner" id="inner8">User Name</div>', $this->getUsers($extraArray)->show());
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testShowFailWithTwig()
    {
        $extraArray = array(array('method' => 'count', 'return' => 10), array('method' => 'find', 'return' => true));
        $this->assertContains('<div class="inner" id="inner8">User Name</div>', $this->getUsers($extraArray)->show());
    }

    public function testShowFailWithEmptyFindResult()
    {
        $extraArray = array(array('method' => 'count', 'return' => 10), array('method' => 'find', 'return' => array()));
        $this->twigLoader->addPath('admin/template/');

        try {
            $this->getUsers($extraArray)->show();
        } catch (\Exception $e) {
            $this->assertEquals(
                'An error occurred while trying to fetch rows for Pagination',
                $e->getMessage()
            );
        }
    }

    public function testEditSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="route" value="users">',
            $this->getUsers($this->extraArrayFull)->edit(2)
        );
    }

    public function testEditFailwithEmptyUser()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="route" value="users">',
            $this->getUsers($this->extraArrayFull)->edit(2)
        );
    }

}
