<?php

namespace MyPoll\Tests\Unit\Classes;

use DI\Container;
use Mockery as m;
use MyPoll\Classes\Database\RedBeanDB;
use MyPoll\Classes\Login\Login;
use MyPoll\Classes\Settings;
use MyPoll\Classes\Users;
use PHPUnit_Framework_TestCase;

class LoginTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Container
     */
    private $container;

    /**
     * @var Login
     */
    private $login;

    public function setUp()
    {
        parent::setUp();
        global  $container;
        $this->container = $container;
        $this->login = $this->getLogin();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @param mixed $return
     *
     * @return RedBeanDB
     */
    private function getMockObject($return)
    {
        $database = m::mock('MyPoll\Classes\Database\RedBeanDB');
        $database->shouldReceive('getRow')->once()->withAnyArgs()->andReturn($return);
        $database->shouldReceive('addRows')->once()->withAnyArgs()->andReturnNull();
        $database->shouldReceive('store')->once()->withAnyArgs()->andReturnNull();
        return $database;
    }

    private function getMockData()
    {
        return array(
            'id' => 1,
            'email' => 'email@d.com',
            'user_name' => 'user',
            'user_pass' => password_hash('password', PASSWORD_DEFAULT)
        );
    }

    /**
     * @return Login
     */
    private function getLogin()
    {
        $login =  new Login(
            $this->getMockObject($this->getMockData()),
            $this->container->get(Users::class),
            $this->container->get(Settings::class)
        );

        return $login;
    }

    public function testCheckSuccess()
    {
        $this->assertEquals(true, $this->login->check('user', 'password'));
    }

    public function testCheckFailWrongPassword()
    {
        $this->assertEquals(false, $this->login->check('user', 'wrongpassword'));
    }

    public function testCheckFailNoUserAndPasswordSet()
    {
        $this->assertEquals(false, $this->login->check('', ''));
    }

    public function testIsLoggedInSuccess()
    {
        $this->login->check('user', 'password');
        $this->assertEquals(true, $this->login->isLoggedIn());
    }

    public function testIsLoggedInSuccessWithRememberMe()
    {
        //$_POST['rememberme'] = 'rememberme';
        $this->login->check('user', 'password');
        $this->assertEquals(true, $this->login->isLoggedIn());
    }

    public function testIsLoggedInFailWrongPassword()
    {
        $this->login->check('user', 'wrongpassword');
        $this->assertFalse($this->login->isLoggedIn());
    }

    public function testIsLoggedInFailNoUserAndPasswordSet()
    {
        $this->login->check('', '');
        $this->assertFalse($this->login->isLoggedIn());
    }

}
