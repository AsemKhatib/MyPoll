<?php

namespace MyPoll\Tests\Integration\Classes;

use DI\Container;
use Mockery as m;
use MyPoll\Classes\Questions;
use Twig_Loader_Filesystem;
use PHPUnit_Framework_TestCase;
use Exception;

class QuestionsIntegrationTest extends PHPUnit_Framework_TestCase
{
    protected $qid = 46;

    protected $dataArray = array(
        'question' => 'question-test-Add',
        'answers' => array('answer1', 'answer2', 'answer3')
    );

    protected $dataArrayEdit = array(
        'qid' => 46,
        'question' => 'question-test-edit',
        'answers_old' => array('answer1', 'answer2', 'answer3')
    );

    /**
     * @var Container
     */
    private $container;

    /**
     * @var Twig_Loader_Filesystem
     */
    private $twigLoader;

    public function setUp()
    {
        parent::setUp();
        global  $container;
        $this->container = $container;
        $this->twigLoader = $this->container->get(Twig_Loader_Filesystem::class);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @return Questions
     */
    private function getQuestion()
    {
        return $this->container->get(Questions::class);
    }

    public function testAddSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="callBack" value="addExecute">',
            $this->getQuestion()->add()
        );
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testAddFail()
    {
        $this->getQuestion()->add();
    }

    public function testGetPostParamsForAddMethodSuccess()
    {
        $_POST['question'] = 'question1111';
        $_POST['answer'] = array('answer1', 'answer2', 'answer3');
        $this->assertEquals(
            array('question' => $_POST['question'], 'answers' => $_POST['answer']),
            $this->getQuestion()->getPostParamsForAddMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Notice
     */
    public function testGetPostParamsForAddMethodFailWithNoPostParams()
    {
        $this->getQuestion()->getPostParamsForAddMethod();
    }

    public function testGetPostParamsForAddMethodFailWithEmptyPostParams()
    {
        $_POST['question'] = '';
        $_POST['answer'] = array();
        $this->assertArrayHasKey('question', $this->getQuestion()->getPostParamsForAddMethod());
        $this->assertArrayHasKey('answers', $this->getQuestion()->getPostParamsForAddMethod());
    }

    public function testAddExecuteSuccess()
    {
        $question = $this->getQuestion();
        $this->assertEquals('Question Added successfully', $question->addExecute($this->dataArray));
    }

//    /**
//     * @expectedException \Exception
//     * @expectedExceptionMessage Something went wrong while trying to add the question
//     */
//    public function testAddExecuteFailWithAddQuestion()
//    {
//        $this->dataArray['question'] = '';
//        $this->getQuestion()->addExecute($this->dataArray);
//    }
//
//    /**
//     * @expectedException \Exception
//     * @expectedExceptionMessage Something went wrong while trying to add the answers of the new question
//     */
//    public function testAddExecuteFailWithAddAnswers()
//    {
//        $this->dataArray['ansers'] = array();
//        $this->getQuestion()->addExecute($this->dataArray);
//    }


    public function testShowSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains('<div class="show_poll">', $this->getQuestion()->show());
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testShowFailWithTwig()
    {
        $this->getQuestion()->show();
    }

//    public function testShowFailWithEmptyFindResult()
//    {
//        $extraArray = array(
//            array('method' => 'count', 'return' => 10),
//            array('method' => 'find', 'return' => array())
//        );
//
//        $this->twigLoader->addPath('admin/template/');
//
//        try {
//            $this->getQuestion($extraArray)->show();
//        } catch (\Exception $e) {
//            $this->assertEquals(
//                'An error occurred while trying to fetch rows for Pagination',
//                $e->getMessage()
//            );
//        }
//    }

    public function testShowAnswersSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            'function drawChart()',
            $this->getQuestion()->showAnswers($this->qid, true)
        );
    }

//    public function testShowAnswersFailEmptyArray()
//    {
//        $extraArray = array(
//            array('method' => 'getAll', 'return' => array()));
//
//        $this->assertFalse($this->getQuestion($extraArray)->showAnswers(1, 'true'));
//    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testShowAnswersFailWithTwig()
    {
        $this->getQuestion()->showAnswers($this->qid, 'true');
    }

    public function testEditSuccess()
    {
        $this->twigLoader->addPath('admin/template/');
        $this->assertContains(
            '<input type="hidden" id="callBack" value="editExecute">',
            $this->getQuestion()->edit($this->qid)
        );
    }

    /**
     * @expectedException \Twig_Error_Loader
     */
    public function testEditFail()
    {
        $this->getQuestion()->edit($this->qid+100);
    }

    public function testGetPostParamsForEditMethodSuccess()
    {
        $_POST['qid'] = '1';
        $_POST['question'] = 'question1111';
        $_POST['answer'] = array('answer1', 'answer2', 'answer3');
        $this->assertEquals(
            array('qid' => $_POST['qid'], 'question' => $_POST['question'], 'answers_old' => $_POST['answer']),
            $this->getQuestion()->getPostParamsForEditMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Notice
     */
    public function testGetPostParamsForEditMethodFailWithNoPostParams()
    {
        $this->getQuestion()->getPostParamsForEditMethod();
    }

    public function testGetPostParamsForEditMethodFailWithEmptyPostParams()
    {
        $_POST['qid'] = '';
        $_POST['question'] = '';
        $_POST['answer'] = array();

        $this->assertEquals(
            array(
                'qid' => '',
                'question' => '',
                'answers_old' => array()
            ),
            $this->getQuestion()->getPostParamsForEditMethod()
        );
    }

    /**
     * @expectedException \PHPUnit_Framework_Error
     */
    public function testGetPostParamsForEditMethodFailWithEmptyPostParamsWithUndefinedArray()
    {
        $_POST['qid'] = '';
        $_POST['question'] = '';
        $_POST['answer'] = '';

        $this->getQuestion()->getPostParamsForEditMethod();
    }

    public function testEditExecuteSuccess()
    {
        $question = $this->getQuestion();
        $this->assertEquals('Question edited successfully', $question->editExecute($this->dataArrayEdit));
    }

//    /**
//     * @expectedException \Exception
//     * @expectedExceptionMessage Something went wrong while trying to edit the question
//     */
//    public function testEditExecuteFailWithQuestionEdit()
//    {
//        $extraArray = array(
//            array('method' => 'getById', 'return' => true),
//            array('method' => 'editRow', 'return' => array()),
//            array('method' => 'store', 'return' => array())
//        );
//
//        $this->getQuestion($extraArray)->editExecute($this->dataArrayEdit);
//    }

//    /**
//     * @expectedException \Exception
//     * @expectedExceptionMessage Something went wrong while trying to add new answers to this question
//     */
//    public function testEditExecuteFailWithAnswersAdd()
//    {
//        $extraArray = array(
//            array('method' => 'getById', 'return' => true),
//            array('method' => 'editRow', 'return' => true),
//            array('method' => 'store', 'return' => true),
//            array('method' => 'getById', 'return' => array(0 => [])),
//            array('method' => 'addRows', 'return' => array()),
//            array('method' => 'store', 'return' => array())
//        );
//
//        $this->getQuestion($extraArray)->editExecute($this->dataArrayEdit);
//    }
//
//    /**
//     * @expectedException \Exception
//     * @expectedExceptionMessage Something went wrong while trying to edit the answers of this question
//     */
//    public function testEditExecuteFailWithAnswersEdit()
//    {
//        $extraArray = array(
//            array('method' => 'getById', 'return' => true),
//            array('method' => 'editRow', 'return' => true),
//            array('method' => 'store', 'return' => true),
//            array('method' => 'getById', 'return' => array(0 => array('answer' => 'b'))),
//            array('method' => 'editRow', 'return' => array()),
//            array('method' => 'store', 'return' => array())
//        );
//
//        $this->getQuestion($extraArray)->editExecute($this->dataArrayEdit);
//    }

    public function testDeleteSuccess()
    {
        $this->assertEquals(
            'The question and all its answers were successfully deleted',
            $this->getQuestion()->delete($this->qid)
        );
    }

}
